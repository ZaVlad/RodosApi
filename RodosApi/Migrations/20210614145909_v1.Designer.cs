// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RodosApi.Data;

namespace RodosApi.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20210614145909_v1")]
    partial class v1
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.7")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = "20c97c87-744c-4a17-8c21-f0cdf1458b20",
                            ConcurrencyStamp = "aa396827-c22a-4492-8930-732c2994e01d",
                            Name = "Admin"
                        },
                        new
                        {
                            Id = "91663e61-8bff-4d1b-85a0-bf8704d6a442",
                            ConcurrencyStamp = "47ae008f-fad9-4edd-ac4b-869acf4b6c1a",
                            Name = "User"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("RodosApi.Domain.Category", b =>
                {
                    b.Property<long>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.HasKey("CategoryId");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            CategoryId = 1L,
                            Name = "Furniture"
                        },
                        new
                        {
                            CategoryId = 2L,
                            Name = "Door"
                        });
                });

            modelBuilder.Entity("RodosApi.Domain.Client", b =>
                {
                    b.Property<long>("ClientId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ClientId");

                    b.ToTable("Clients");

                    b.HasData(
                        new
                        {
                            ClientId = 1L,
                            Address = "ms 1 street",
                            Email = "OlegKick@ukr.net",
                            LastName = "Krigan",
                            Name = "Oleg",
                            Phone = "380500653293"
                        },
                        new
                        {
                            ClientId = 2L,
                            Address = "BubleCity5 street",
                            Email = "ADventureTime@ukr.net",
                            LastName = "Mortens",
                            Name = "Finn",
                            Phone = ""
                        });
                });

            modelBuilder.Entity("RodosApi.Domain.Coating", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.HasKey("Id");

                    b.ToTable("Coatings");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Name = "Metal"
                        },
                        new
                        {
                            Id = 2L,
                            Name = "Wood"
                        });
                });

            modelBuilder.Entity("RodosApi.Domain.Collection", b =>
                {
                    b.Property<long>("CollectionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.HasKey("CollectionId");

                    b.ToTable("Collections");

                    b.HasData(
                        new
                        {
                            CollectionId = 1L,
                            Name = "Basic street"
                        },
                        new
                        {
                            CollectionId = 2L,
                            Name = "White king"
                        });
                });

            modelBuilder.Entity("RodosApi.Domain.Color", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.HasKey("Id");

                    b.ToTable("Colors");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Name = "Red"
                        },
                        new
                        {
                            Id = 2L,
                            Name = "Blue"
                        });
                });

            modelBuilder.Entity("RodosApi.Domain.Country", b =>
                {
                    b.Property<long>("CountryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.HasKey("CountryId");

                    b.ToTable("Countries");

                    b.HasData(
                        new
                        {
                            CountryId = 1L,
                            Name = "Ukraine"
                        },
                        new
                        {
                            CountryId = 2L,
                            Name = "Italia"
                        });
                });

            modelBuilder.Entity("RodosApi.Domain.DeliveryStatus", b =>
                {
                    b.Property<byte>("Id")
                        .HasColumnType("tinyint");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("DeliveryStatuses");

                    b.HasData(
                        new
                        {
                            Id = (byte)1,
                            Name = "Preparing for delivery"
                        },
                        new
                        {
                            Id = (byte)2,
                            Name = "In delivery process"
                        },
                        new
                        {
                            Id = (byte)3,
                            Name = "Was delivered"
                        });
                });

            modelBuilder.Entity("RodosApi.Domain.Door", b =>
                {
                    b.Property<long>("DoorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("CategoryId")
                        .HasColumnType("bigint");

                    b.Property<long>("CoatingId")
                        .HasColumnType("bigint");

                    b.Property<long>("CollectionId")
                        .HasColumnType("bigint");

                    b.Property<long>("ColorId")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<long>("DoorHandleId")
                        .HasColumnType("bigint");

                    b.Property<long>("DoorModelId")
                        .HasColumnType("bigint");

                    b.Property<long>("HingesId")
                        .HasColumnType("bigint");

                    b.Property<long>("MakerId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<decimal>("Price")
                        .HasColumnType("money");

                    b.Property<long>("TypeOfDoorId")
                        .HasColumnType("bigint");

                    b.HasKey("DoorId");

                    b.HasIndex("CategoryId")
                        .IsUnique();

                    b.HasIndex("CoatingId")
                        .IsUnique();

                    b.HasIndex("CollectionId")
                        .IsUnique();

                    b.HasIndex("ColorId")
                        .IsUnique();

                    b.HasIndex("DoorHandleId")
                        .IsUnique();

                    b.HasIndex("DoorModelId")
                        .IsUnique();

                    b.HasIndex("HingesId")
                        .IsUnique();

                    b.HasIndex("MakerId")
                        .IsUnique();

                    b.HasIndex("TypeOfDoorId");

                    b.ToTable("Doors");

                    b.HasData(
                        new
                        {
                            DoorId = 1L,
                            CategoryId = 2L,
                            CoatingId = 1L,
                            CollectionId = 1L,
                            ColorId = 2L,
                            Description = "White death door",
                            DoorHandleId = 1L,
                            DoorModelId = 1L,
                            HingesId = 1L,
                            MakerId = 2L,
                            Name = "winter aid",
                            Price = 5000.72m,
                            TypeOfDoorId = 1L
                        });
                });

            modelBuilder.Entity("RodosApi.Domain.DoorHandle", b =>
                {
                    b.Property<long>("DoorHandleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("CategoryId")
                        .HasColumnType("bigint");

                    b.Property<long>("ColorId")
                        .HasColumnType("bigint");

                    b.Property<long>("FurnitureTypeId")
                        .HasColumnType("bigint");

                    b.Property<long>("MakerId")
                        .HasColumnType("bigint");

                    b.Property<long>("MaterialId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<decimal>("Price")
                        .HasColumnType("money");

                    b.HasKey("DoorHandleId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("ColorId");

                    b.HasIndex("FurnitureTypeId");

                    b.HasIndex("MakerId");

                    b.HasIndex("MaterialId");

                    b.ToTable("DoorHandles");

                    b.HasData(
                        new
                        {
                            DoorHandleId = 1L,
                            CategoryId = 1L,
                            ColorId = 1L,
                            FurnitureTypeId = 1L,
                            MakerId = 2L,
                            MaterialId = 1L,
                            Name = "Forme Door handle italia",
                            Price = 245.34m
                        },
                        new
                        {
                            DoorHandleId = 2L,
                            CategoryId = 1L,
                            ColorId = 2L,
                            FurnitureTypeId = 1L,
                            MakerId = 1L,
                            MaterialId = 2L,
                            Name = "Door handle water+ Rodos",
                            Price = 450.54m
                        });
                });

            modelBuilder.Entity("RodosApi.Domain.DoorModel", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.HasKey("Id");

                    b.ToTable("DoorModels");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Name = "Bas 001"
                        },
                        new
                        {
                            Id = 2L,
                            Name = "White winter 002"
                        });
                });

            modelBuilder.Entity("RodosApi.Domain.FurnitureType", b =>
                {
                    b.Property<long>("FurnitureId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.HasKey("FurnitureId");

                    b.ToTable("FurnitureTypes");

                    b.HasData(
                        new
                        {
                            FurnitureId = 1L,
                            Name = "Door Handle"
                        },
                        new
                        {
                            FurnitureId = 2L,
                            Name = "Hinges"
                        });
                });

            modelBuilder.Entity("RodosApi.Domain.Hinges", b =>
                {
                    b.Property<long>("HingesId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("CategoryId")
                        .HasColumnType("bigint");

                    b.Property<long>("FurnitureTypeId")
                        .HasColumnType("bigint");

                    b.Property<long>("MakerId")
                        .HasColumnType("bigint");

                    b.Property<long>("MaterialId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<decimal>("Price")
                        .HasColumnType("money");

                    b.Property<long>("TypeOfHingesId")
                        .HasColumnType("bigint");

                    b.HasKey("HingesId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("FurnitureTypeId");

                    b.HasIndex("MakerId");

                    b.HasIndex("MaterialId");

                    b.HasIndex("TypeOfHingesId");

                    b.ToTable("Hinges");

                    b.HasData(
                        new
                        {
                            HingesId = 1L,
                            CategoryId = 1L,
                            FurnitureTypeId = 1L,
                            MakerId = 2L,
                            MaterialId = 1L,
                            Name = "Magnetic look",
                            Price = 700.23m,
                            TypeOfHingesId = 2L
                        },
                        new
                        {
                            HingesId = 2L,
                            CategoryId = 1L,
                            FurnitureTypeId = 1L,
                            MakerId = 1L,
                            MaterialId = 2L,
                            Name = "Deffault look",
                            Price = 104.94m,
                            TypeOfHingesId = 1L
                        });
                });

            modelBuilder.Entity("RodosApi.Domain.Maker", b =>
                {
                    b.Property<long>("MakerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("CountryId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.HasKey("MakerId");

                    b.HasIndex("CountryId");

                    b.ToTable("Makers");

                    b.HasData(
                        new
                        {
                            MakerId = 1L,
                            CountryId = 1L,
                            Name = "Rodos"
                        },
                        new
                        {
                            MakerId = 2L,
                            CountryId = 2L,
                            Name = "Mario"
                        });
                });

            modelBuilder.Entity("RodosApi.Domain.Material", b =>
                {
                    b.Property<long>("MaterialId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.HasKey("MaterialId");

                    b.ToTable("Materials");

                    b.HasData(
                        new
                        {
                            MaterialId = 1L,
                            Name = "Chrome"
                        },
                        new
                        {
                            MaterialId = 2L,
                            Name = "Diamond"
                        });
                });

            modelBuilder.Entity("RodosApi.Domain.Order", b =>
                {
                    b.Property<long>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("ClientId")
                        .HasColumnType("bigint");

                    b.Property<byte>("DeliveryStatusId")
                        .HasColumnType("tinyint");

                    b.Property<long?>("DoorHandleId")
                        .HasColumnType("bigint");

                    b.Property<byte>("DoorHandleQuantity")
                        .HasColumnType("tinyint");

                    b.Property<long?>("DoorId")
                        .HasColumnType("bigint");

                    b.Property<byte>("DoorQuantity")
                        .HasColumnType("tinyint");

                    b.Property<byte>("HingesQuantity")
                        .HasColumnType("tinyint");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Price")
                        .HasColumnType("money");

                    b.HasKey("OrderId");

                    b.HasIndex("ClientId");

                    b.HasIndex("DeliveryStatusId");

                    b.HasIndex("DoorHandleId");

                    b.HasIndex("DoorId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("RodosApi.Domain.OrderHinges", b =>
                {
                    b.Property<long>("HingesId")
                        .HasColumnType("bigint");

                    b.Property<long>("OrderId")
                        .HasColumnType("bigint");

                    b.Property<int>("HingesQuantity")
                        .HasColumnType("int");

                    b.HasKey("HingesId", "OrderId");

                    b.HasIndex("OrderId");

                    b.ToTable("OrderHinges");
                });

            modelBuilder.Entity("RodosApi.Domain.TypeOfDoor", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.HasKey("Id");

                    b.ToTable("TypesOfDoors");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Name = "Entrance door"
                        },
                        new
                        {
                            Id = 2L,
                            Name = "Interior door"
                        });
                });

            modelBuilder.Entity("RodosApi.Domain.TypeOfHinge", b =>
                {
                    b.Property<long>("TypeOfHingeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.HasKey("TypeOfHingeId");

                    b.ToTable("TypesOfHinges");

                    b.HasData(
                        new
                        {
                            TypeOfHingeId = 1L,
                            Name = "Mortise looks"
                        },
                        new
                        {
                            TypeOfHingeId = 2L,
                            Name = "Other looks"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RodosApi.Domain.Door", b =>
                {
                    b.HasOne("RodosApi.Domain.Category", "Category")
                        .WithOne()
                        .HasForeignKey("RodosApi.Domain.Door", "CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RodosApi.Domain.Coating", "Coating")
                        .WithOne()
                        .HasForeignKey("RodosApi.Domain.Door", "CoatingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RodosApi.Domain.Collection", "Collection")
                        .WithOne()
                        .HasForeignKey("RodosApi.Domain.Door", "CollectionId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("RodosApi.Domain.Color", "Color")
                        .WithOne()
                        .HasForeignKey("RodosApi.Domain.Door", "ColorId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("RodosApi.Domain.DoorHandle", "DoorHandle")
                        .WithOne()
                        .HasForeignKey("RodosApi.Domain.Door", "DoorHandleId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("RodosApi.Domain.DoorModel", "DoorModel")
                        .WithOne()
                        .HasForeignKey("RodosApi.Domain.Door", "DoorModelId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("RodosApi.Domain.Hinges", "Hinges")
                        .WithOne()
                        .HasForeignKey("RodosApi.Domain.Door", "HingesId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("RodosApi.Domain.Maker", "Maker")
                        .WithOne()
                        .HasForeignKey("RodosApi.Domain.Door", "MakerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("RodosApi.Domain.TypeOfDoor", "TypeOfDoor")
                        .WithMany()
                        .HasForeignKey("TypeOfDoorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Coating");

                    b.Navigation("Collection");

                    b.Navigation("Color");

                    b.Navigation("DoorHandle");

                    b.Navigation("DoorModel");

                    b.Navigation("Hinges");

                    b.Navigation("Maker");

                    b.Navigation("TypeOfDoor");
                });

            modelBuilder.Entity("RodosApi.Domain.DoorHandle", b =>
                {
                    b.HasOne("RodosApi.Domain.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RodosApi.Domain.Color", "Color")
                        .WithMany()
                        .HasForeignKey("ColorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RodosApi.Domain.FurnitureType", "FurnitureType")
                        .WithMany()
                        .HasForeignKey("FurnitureTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RodosApi.Domain.Maker", "Maker")
                        .WithMany()
                        .HasForeignKey("MakerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RodosApi.Domain.Material", "Material")
                        .WithMany()
                        .HasForeignKey("MaterialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Color");

                    b.Navigation("FurnitureType");

                    b.Navigation("Maker");

                    b.Navigation("Material");
                });

            modelBuilder.Entity("RodosApi.Domain.Hinges", b =>
                {
                    b.HasOne("RodosApi.Domain.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RodosApi.Domain.FurnitureType", "FurnitureType")
                        .WithMany()
                        .HasForeignKey("FurnitureTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RodosApi.Domain.Maker", "Maker")
                        .WithMany()
                        .HasForeignKey("MakerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RodosApi.Domain.Material", "Material")
                        .WithMany()
                        .HasForeignKey("MaterialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RodosApi.Domain.TypeOfHinge", "TypeOfHinge")
                        .WithMany()
                        .HasForeignKey("TypeOfHingesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("FurnitureType");

                    b.Navigation("Maker");

                    b.Navigation("Material");

                    b.Navigation("TypeOfHinge");
                });

            modelBuilder.Entity("RodosApi.Domain.Maker", b =>
                {
                    b.HasOne("RodosApi.Domain.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("RodosApi.Domain.Order", b =>
                {
                    b.HasOne("RodosApi.Domain.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RodosApi.Domain.DeliveryStatus", "DeliveryStatus")
                        .WithMany()
                        .HasForeignKey("DeliveryStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RodosApi.Domain.DoorHandle", "DoorHandle")
                        .WithMany()
                        .HasForeignKey("DoorHandleId");

                    b.HasOne("RodosApi.Domain.Door", "Door")
                        .WithMany()
                        .HasForeignKey("DoorId");

                    b.Navigation("Client");

                    b.Navigation("DeliveryStatus");

                    b.Navigation("Door");

                    b.Navigation("DoorHandle");
                });

            modelBuilder.Entity("RodosApi.Domain.OrderHinges", b =>
                {
                    b.HasOne("RodosApi.Domain.Hinges", "Hinges")
                        .WithMany()
                        .HasForeignKey("HingesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RodosApi.Domain.Order", "Order")
                        .WithMany("Hinges")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Hinges");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("RodosApi.Domain.Order", b =>
                {
                    b.Navigation("Hinges");
                });
#pragma warning restore 612, 618
        }
    }
}
